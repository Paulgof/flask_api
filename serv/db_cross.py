from psycopg2 import connect
from psycopg2 import ProgrammingError, Error, DataError
from psycopg2.extras import Json
from serv.validators import InvalidRequestError, benchmark


class DBConnector:

    create_query = 'CREATE TABLE imports (' \
                   'id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,' \
                   'users jsonb)'
    insert_query = 'INSERT INTO imports (users) VALUES (%s) RETURNING id'
    update_query = \
        'UPDATE imports SET users = jsonb_set(users, %s, users->%s || %s, false) WHERE id = %s RETURNING users->%s'
    select_query = 'SELECT users FROM imports WHERE id = %s'

    def __init__(self, config):
        self._dbname = config.get('DB_NAME')
        self._dbuser = config.get('DB_USER')
        self._dbhost = config.get('DB_HOST')
        self._dbpass = config.get('DB_PASSWORD')
        self._create_table()

    def _db_connect(self):
        return connect(
            dbname=self._dbname,
            user=self._dbuser,
            host=self._dbhost,
            password=self._dbpass
        )

    def _create_table(self):
        conn = self._db_connect()
        cursor = conn.cursor()
        try:
            cursor.execute(self.create_query)
            conn.commit()
            print('Table "imports" has created')
        except ProgrammingError:
            print('Table "imports" already exists')
        finally:
            cursor.close()
            conn.close()

    def add_import(self, pack):
        conn = self._db_connect()
        cursor = conn.cursor()
        try:
            cursor.execute(self.insert_query, [Json(pack)])
            result = cursor.fetchone()[0]
            conn.commit()
        except Error:
            print('DB Error')
            raise InvalidRequestError
        finally:
            cursor.close()
            conn.close()
        print('FROM INSERT GOT ID =', result)
        return result

    def patch_user(self, import_id, citizen_id, data):
        conn = self._db_connect()
        cursor = conn.cursor()
        try:
            cursor.execute(self.update_query, ['{' + str(citizen_id) + '}', str(citizen_id),
                                               Json(data), import_id, str(citizen_id)])
            conn.commit()
            result = cursor.fetchone()[0]
        except DataError:
            print('DB Error')
            raise InvalidRequestError
        finally:
            cursor.close()
            conn.close()
        print('PATCHED USER =', result)
        return result

    def get_users(self, import_id):
        conn = self._db_connect()
        cursor = conn.cursor()
        try:
            cursor.execute(self.select_query, [import_id])
            result = cursor.fetchone()[0]
        except (Error, TypeError):
            print('DB Error')
            raise InvalidRequestError
        finally:
            cursor.close()
            conn.close()
        print('RETURNING IMPORT {} = {}'.format(import_id, result))
        return result


