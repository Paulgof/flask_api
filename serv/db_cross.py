from psycopg2 import connect
from psycopg2 import ProgrammingError, Error, DataError
from psycopg2.extras import Json
from serv.validators import InvalidRequestError


class DBConnector:

    create_query = 'CREATE TABLE imports (' \
                   'id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,' \
                   'users jsonb)'

    insert_query = 'INSERT INTO imports (users) VALUES (%s) RETURNING id'

    get_ids = 'SELECT jsonb_object_keys(users) FROM imports WHERE id = %s'
    get_relatives = 'SELECT users #> %s FROM imports WHERE id = %s'
    new_relatives_update = 'UPDATE imports SET users = jsonb_insert(users, %s, %s) WHERE id = %s'
    old_relatives_update = 'UPDATE imports SET users = jsonb_set(users, %s, %s) WHERE id = %s'
    update_query = \
        'UPDATE imports SET users = jsonb_set(users, %s, users->%s || %s, false) WHERE id = %s RETURNING users->%s'

    select_query = 'SELECT users FROM imports WHERE id = %s'

    def __init__(self, config):
        self._dbname = config.get('DB_NAME')
        self._dbuser = config.get('DB_USER')
        self._dbhost = config.get('DB_HOST')
        self._dbpass = config.get('DB_PASSWORD')
        self._create_table()

    def _db_connect(self):
        return connect(
            dbname=self._dbname,
            user=self._dbuser,
            host=self._dbhost,
            password=self._dbpass
        )

    def _create_table(self):
        conn = self._db_connect()
        cursor = conn.cursor()
        try:
            cursor.execute(self.create_query)
            conn.commit()
            # print('Table "imports" has created')
        except ProgrammingError:
            # print('Table "imports" already exists')
            pass
        finally:
            cursor.close()
            conn.close()

    def add_import(self, pack):
        conn = self._db_connect()
        cursor = conn.cursor()
        try:
            cursor.execute(self.insert_query, [Json(pack)])
            result = cursor.fetchone()[0]
            conn.commit()
        except Error:
            raise InvalidRequestError
        finally:
            cursor.close()
            conn.close()
        return result

    def patch_user(self, import_id, citizen_id, data):
        conn = self._db_connect()
        cursor = conn.cursor()
        try:
            if 'relatives' in data.keys():
                cursor.execute(self.get_ids, [import_id])
                pack_ids = {int(i[0]) for i in cursor.fetchall()}
                if not set(data['relatives']).issubset(pack_ids):
                    raise InvalidRequestError

                cursor.execute(self.get_relatives, ['{' + str(citizen_id) + ', relatives}', import_id])
                old_relations = cursor.fetchone()[0]
                new_relations = list(set(data['relatives']).difference(set(old_relations)))

                for nrt in new_relations:
                    print(nrt)
                    pre = '{' + str(nrt) + ', "relatives", 0}'
                    print(pre, citizen_id, import_id)
                    cursor.execute(self.new_relatives_update, [pre, str(citizen_id), import_id])

                for ort in old_relations:
                    cursor.execute(self.get_relatives, ['{' + str(ort) + ', relatives}', import_id])
                    ort_updated = list(set(cursor.fetchone()[0]).difference([citizen_id]))
                    cursor.execute(self.old_relatives_update,
                                   ['{' + str(ort) + ', relatives}', Json(ort_updated), import_id])

            cursor.execute(self.update_query, ['{' + str(citizen_id) + '}', str(citizen_id),
                                               Json(data), import_id, str(citizen_id)])
            conn.commit()
            result = cursor.fetchone()[0]
        except (KeyError, Error):
            raise InvalidRequestError
        finally:
            cursor.close()
            conn.close()
        return result

    def get_users(self, import_id):
        conn = self._db_connect()
        cursor = conn.cursor()
        try:
            cursor.execute(self.select_query, [import_id])
            result = cursor.fetchone()[0]
        except (Error, TypeError):
            raise InvalidRequestError
        finally:
            cursor.close()
            conn.close()
        return result


